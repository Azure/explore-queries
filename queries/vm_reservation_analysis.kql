resources
| where type =~ 'microsoft.compute/virtualmachines'

// VM GROUPING OPTIONS
// Choose one grouping method by uncommenting its section below.

// Option 1: Uncomment the following section to group VMs by name prefix (e.g., "app01" -> "app").

// | where name matches regex '^[a-zA-Z]+\\d+$'             
// | extend g = tostring(extract('^[a-zA-Z]+', 0, name)) 

// Option 2: Uncomment the following section to group VMs by custom name regex pattern.
//           Replace 'regex-pattern' with your pattern.
//           Regex pattern must include exactly one capture group.
//           Use Copilot to rapidly build regex pattern from sample VM names.

// | extend g = tostring(extract_all(@'(?i)regex-pattern', name))

// Option 3: Uncomment the following section to group VMs by resource group.

// | extend g = resourceGroup

// Option 4: Uncomment the following section to group VMs by tag.
//           Replace 'tag-name' with the name of your tag.

// | extend g = tostring(tags['epic-app'])

// Option 5: Uncomment the following section to group VMs by multiple values.

// | extend g = bag_pack('key_1', 'value_1', 'key_2', 'value_2')

// Option 6: Uncomment the following section to group by custom KQL expression.

// | extend g = // custom grouping expression

| extend group = tostring(g)
| where isnotempty(group)
| summarize vmCount = count(),
            resVmCount = countif(not(isnull(properties.capacityReservation))),
            unresVmCount = countif(isnull(properties.capacityReservation))
            by size = tolower(tostring(properties.hardwareProfile.vmSize)),
               zone = tostring(zones[0]),
               subscriptionId,
               location,
               group
| join kind = leftouter(
    resources
    | where type =~ "microsoft.compute/capacityreservationgroups/capacityreservations"
    | summarize _totalResCapacity = sum(toint(sku.capacity)),
                _availResCapacity = sum(toint(sku.capacity) - iff(isnull(properties.virtualMachinesAssociated), 0, array_length(properties.virtualMachinesAssociated)))
                by size = tolower(tostring(sku.name)),
                   zone = tostring(zones[0]),
                   subscriptionId,
                   location
) on size,
     zone,
     subscriptionId,
     location
| extend totalResCapacity = iff(isnull(_totalResCapacity), 0, _totalResCapacity)
| extend availResCapacity = iff(isnull(_availResCapacity), 0, _availResCapacity)
| extend overallocatedResCapacity = iff(availResCapacity < 0, abs(availResCapacity), 0)
| extend purchaseResCapacity = unresVmCount - availResCapacity
| extend alert_notEnoughRes = tobool(unresVmCount > availResCapacity)
| extend alert_unresVms = tobool(unresVmCount > 0)
| extend alert_overallocated = tobool(overallocatedResCapacity > 0)
| project group, size, zone, subscriptionId, location, vmCount,
          reservedVms = strcat(
            tostring(resVmCount), "/", tostring(vmCount), "  (", round((resVmCount * 100 / vmCount), 2), " %)",
            iff(alert_unresVms, " ⚠️", "")
          ),
          totalCapacity = totalResCapacity,
          availableCapacity = strcat(
            tostring(min_of(availResCapacity, 0)),
            iff(alert_notEnoughRes, " ⚠️", "")
          ),
          purchaseCapacity = purchaseResCapacity,
          overallocatedCapacity = strcat(
            tostring(overallocatedResCapacity),
            iff(alert_overallocated, " ⚠️", "")
          ),
          notes = strcat(
            iff(alert_unresVms, strcat("⚠️ ", unresVmCount, " VM(s) do not have reservation(s). "), "✅ All VM(s) have reservation(s). "),
            iff(alert_notEnoughRes, strcat("⚠️ ", "Not enough reservation(s) (", totalResCapacity, ") to cover ", vmCount, " VM(s). "), "✅ There are enough reservation(s) to cover all VM(s). "),
            iff(alert_overallocated, strcat("⚠️ ", "Reservation(s) are overallocated by ", overallocatedResCapacity, " VM(s). "), "✅ No reservations are overallocated. ")
          )



